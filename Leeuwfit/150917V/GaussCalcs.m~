%% Load 2D Gaussian fit data and perform calculations.

clear all
close all
clc

% Tus - dif project
expno='001_DnaN_TUS_dif_30122014_TUSsignal';
%initval=A001_Images_Set_Experiment(expno);      
initval.basepath='/Users/rleeuw/Work/Data/141230_dnaN_dif_tus/dnaN_dif_tus_40msExpTime_5minAcqTimeYFP_30msExpCFP_002_C1/';

% oriZ - Dif project
%initval.basepath='/Users/rleeuw/Work/Data/OriZ-Dif_Results/';
%% Define variables

Ncells=3;

T=cell(Ncells+4,1);
d=cell(Ncells+4,1);
S=cell(Ncells,1);
Sd=cell(Ncells,1);
BacLife=zeros(Ncells,1); BacLifed=zeros(Ncells,1);
MainPathTus=strcat(initval.basepath,'StacksLong/Tus/DataMULTI/');
MainPathdif=strcat(initval.basepath,'StacksLong/dif/DataMULTI/');

%% Load data
tic
for i=1:Ncells;
    T{i}=load(strcat(MainPathTus,num2str(i),'.mat'));
    d{i}=load(strcat(MainPathdif,num2str(i),'.mat'));
end

%% Calculations and Filtering

IupboundT=50000;
Iupboundd=500000;

n=Ncells+1;

for i=1:Ncells
    for j=1:T{i}.Nspots
    
% Filter intensities         
    T{i}.x{j}(T{i}.x{j}>=IupboundT)=0;
    d{i}.x{j}(d{i}.x{j}>=Iupboundd)=0;
    
% Initiate Spot Intensity Cells

T{n}.I{j}=T{1}.x{j}(:,1);
d{n}.I{j}=d{1}.x{j}(:,1);

% Initiate Cell Intensity Cells

T{n}.FCI{j}=T{1}.x{j}(:,7);
d{n}.FCI{j}=d{1}.x{j}(:,7);

% Initiate normalised X Position Cells

T{n}.X{j}=T{1}.XNorm{j}(:,2);
d{n}.X{j}=d{1}.XNorm{j}(:,2);

% Initiate normalised Y Position Cells

T{n}.Y=T{1}.XNorm{j}(:,4); 
d{n}.Y=d{1}.XNorm{j}(:,4);

% Initiate Integrated Intensity Cells

T{n}.IntI{j}=T{1}.x{j}(:,6);
d{n}.IntI{j}=d{1}.x{j}(:,6);

   end
end

% concatenate matrices to form 
for i=2:Ncells
    for j=1:Nspots
T{n}.I{j}=cat(1,T{n}.I{j},T{i}.x{j}(:,1));
d{n}.I{j}=cat(1,d{n}.I{j},d{i}.x{j}(:,1));

T{n}.FCI{j}=cat(1,T{n}.FCI{j},T{i}.x{j}(:,7));
d{n}.FCI{j}=cat(1,d{n}.FCI{j},d{i}.x{j}(:,7));

T{n}.X{j}=cat(1,T{n}.X{j},T{i}.XNorm{j}(:,2));
d{n}.X{j}=cat(1,d{n}.X{j},d{i}.XNorm{j}(:,2));

T{n}.Y{j}=cat(1,T{n}.Y{j},T{i}.XNorm{j}(:,4));
d{n}.Y{j}=cat(1,d{n}.Y{j},d{i}.XNorm{j}(:,4));

T{n}.IntI{j}=cat(1,T{n}.IntI{j},T{i}.x{j}(:,6));
d{n}.IntI{j}=cat(1,d{n}.IntI{j},d{i}.x{j}(:,6));
    end
end

%% Some Calculations
TotCellsStr=sprintf('Ncells = %d',Ncells);

MeanIntT=cell(Nspots,1);
MeanIntFCT=cell(Nspots,1);
StdIntT
StdFCIntT

for j=1:Nspots
    
MeanIntT{j}=mean(T{n}.IntI{j});
MeanIntFCT{j}=mean(T{n}.FCI{j});
MeanIntd=mean(d{n}.IntI{j});
MeanIntFCd=mean(d{n}.FCI{j});

StdIntT{j}=std(T{n}.IntI{j});
StdFCIntT{j}=std(T{n}.FCI{j});

MeanIntStrT{j}=sprintf('Mean = %g',MeanIntT{j});
StdIntStrT{j}=sprintf('std = %g',StdIntT{j});

StdIntd{j}=std(d{n}.IntI{j});
StdFCIntd{j}=std(d{n}.FCI{j});

MeanIntStrd{j}=sprintf('Mean = %g',MeanIntd{j});
StdIntStrd{j}=sprintf('std = %g',StdIntd{j});
end

for i=1:Ncells
    BacLife(i)=length(T{i}.x(:,1));
    BacLifed(i)=length(d{i}.x(:,1));
end

MaxBacLife=30;
MaxBacLifed=max(BacLifed);

Ki=zeros(MaxBacLife,Ncells);
KiFC=zeros(MaxBacLife,Ncells);
KiR1=zeros(MaxBacLife,Ncells);
KiR2=zeros(MaxBacLife,Ncells);
KiR3=zeros(MaxBacLife,Ncells);

Kx=zeros(MaxBacLife,Ncells);
KxR1=zeros(MaxBacLife,Ncells);
KxR2=zeros(MaxBacLife,Ncells);
KxR3=zeros(MaxBacLife,Ncells);

Ky=zeros(MaxBacLife,Ncells);
KyR1=zeros(MaxBacLife,Ncells);
KyR2=zeros(MaxBacLife,Ncells);
KyR3=zeros(MaxBacLife,Ncells);

Kdi=zeros(MaxBacLife,Ncells);
KdiFC=zeros(MaxBacLife,Ncells);
KdiR1=zeros(MaxBacLifed,Ncells);
KdiR2=zeros(MaxBacLifed,Ncells);
KdiR3=zeros(MaxBacLifed,Ncells);

Kdx=zeros(MaxBacLife,Ncells);
KdxR1=zeros(MaxBacLifed,Ncells);
KdxR2=zeros(MaxBacLifed,Ncells);
KdxR3=zeros(MaxBacLifed,Ncells);

Kdy=zeros(MaxBacLife,Ncells);
KdyR1=zeros(MaxBacLifed,Ncells);
KdyR2=zeros(MaxBacLifed,Ncells);
KdyR3=zeros(MaxBacLifed,Ncells);

for i=1:Ncells
    S{i}.x(:,1)=imresize(T{i}.x(:,6),[MaxBacLife 1],'bilinear');
    S{i}.xR1(:,1)=imresize(T{i}.xR1(:,6),[MaxBacLife 1],'bilinear');
    S{i}.xR2(:,1)=imresize(T{i}.xR2(:,6),[MaxBacLife 1],'bilinear');
    S{i}.xR3(:,1)=imresize(T{i}.xR3(:,6),[MaxBacLife 1],'bilinear');
    
    S{i}.x(:,7)=imresize(T{i}.x(:,7),[MaxBacLife 1],'bilinear');
    
    S{i}.x(:,2)=imresize(T{i}.XNorm(:,2),[MaxBacLife 1],'bilinear');
    S{i}.xR1(:,2)=imresize(T{i}.XNormR1(:,2),[MaxBacLife 1],'bilinear');
    S{i}.xR2(:,2)=imresize(T{i}.XNormR2(:,2),[MaxBacLife 1],'bilinear');
    S{i}.xR3(:,2)=imresize(T{i}.XNormR3(:,2),[MaxBacLife 1],'bilinear');
    
    S{i}.x(:,4)=imresize(T{i}.XNorm(:,4),[MaxBacLife 1],'bilinear');
    S{i}.xR1(:,4)=imresize(T{i}.XNormR1(:,4),[MaxBacLife 1],'bilinear');
    S{i}.xR2(:,4)=imresize(T{i}.XNormR2(:,4),[MaxBacLife 1],'bilinear');
    S{i}.xR3(:,4)=imresize(T{i}.XNormR3(:,4),[MaxBacLife 1],'bilinear');
    
    Sd{i}.x(:,1)=imresize(d{i}.x(:,6),[MaxBacLifed 1],'bilinear');
    Sd{i}.xR1(:,1)=imresize(d{i}.xR1(:,6),[MaxBacLifed 1],'bilinear');
    Sd{i}.xR2(:,1)=imresize(d{i}.xR2(:,6),[MaxBacLifed 1],'bilinear');
    Sd{i}.xR3(:,1)=imresize(d{i}.xR3(:,6),[MaxBacLifed 1],'bilinear');
    
    Sd{i}.x(:,7)=imresize(d{i}.x(:,7),[MaxBacLifed 1],'bilinear');
    
    Sd{i}.x(:,2)=imresize(d{i}.XNorm(:,2),[MaxBacLifed 1],'bilinear');
    Sd{i}.xR1(:,2)=imresize(d{i}.XNormR1(:,2),[MaxBacLifed 1],'bilinear');
    Sd{i}.xR2(:,2)=imresize(d{i}.XNormR2(:,2),[MaxBacLifed 1],'bilinear');
    Sd{i}.xR3(:,2)=imresize(d{i}.XNormR3(:,2),[MaxBacLifed 1],'bilinear');
    
    Sd{i}.x(:,4)=imresize(d{i}.XNorm(:,4),[MaxBacLifed 1],'bilinear');
    Sd{i}.xR1(:,4)=imresize(d{i}.XNormR1(:,4),[MaxBacLifed 1],'bilinear');
    Sd{i}.xR2(:,4)=imresize(d{i}.XNormR2(:,4),[MaxBacLifed 1],'bilinear');
    Sd{i}.xR3(:,4)=imresize(d{i}.XNormR3(:,4),[MaxBacLifed 1],'bilinear');
    
end

%Construct K for taking means of elements at same time point
for n=1:MaxBacLife
    for i=1:Ncells
        Ki(n,i)=S{i}.x(n,1);
        KiFC(n,i)=S{i}.x(n,7);
        KiR1(n,i)=S{i}.xR1(n,1);
        KiR2(n,i)=S{i}.xR2(n,1);
        KiR3(n,i)=S{i}.xR3(n,1);

        Kx(n,i)=S{i}.x(n,2);
        KxR1(n,i)=S{i}.xR1(n,2);
        KxR2(n,i)=S{i}.xR2(n,2);
        KxR3(n,i)=S{i}.xR3(n,2);
        
        Ky(n,i)=S{i}.x(n,4);
        KyR1(n,i)=S{i}.xR1(n,4);
        KyR2(n,i)=S{i}.xR2(n,4);
        KyR3(n,i)=S{i}.xR3(n,4);
    end
end

for n=1:MaxBacLifed
    for i=1:Ncells
        Kdi(n,i)=Sd{i}.x(n,1);
        KdiFC(n,i)=Sd{i}.x(n,7);
        KdiR1(n,i)=Sd{i}.xR1(n,1);
        KdiR2(n,i)=Sd{i}.xR2(n,1);
        KdiR3(n,i)=Sd{i}.xR3(n,1);
        
        Kdx(n,i)=Sd{i}.x(n,2);
        KdxR1(n,i)=Sd{i}.xR1(n,2);
        KdxR2(n,i)=Sd{i}.xR2(n,2);
        KdxR3(n,i)=Sd{i}.xR3(n,2);
        
        Kdy(n,i)=Sd{i}.x(n,4);
        KdyR1(n,i)=Sd{i}.xR1(n,4);
        KdyR2(n,i)=Sd{i}.xR2(n,4);
        KdyR3(n,i)=Sd{i}.xR3(n,4);
        
    end
end

M=zeros(MaxBacLife,6);
MR1=zeros(MaxBacLife,6);
MR2=zeros(MaxBacLife,6);
MR3=zeros(MaxBacLife,6);

Md=zeros(MaxBacLife,6);
MdR1=zeros(MaxBacLife,6);
MdR2=zeros(MaxBacLife,6);
MdR3=zeros(MaxBacLife,6);

for n=1:MaxBacLife
    M(n,1)=mean(Ki(n,:));
    MR1(n,1)=mean(KiR1(n,:));
    MR2(n,1)=mean(KiR2(n,:));
    MR3(n,1)=mean(KiR3(n,:));
    
    M(n,2)=mean(Kx(n,:));
    MR1(n,2)=mean(KxR1(n,:));
    MR2(n,2)=mean(KxR2(n,:));
    MR3(n,2)=mean(KxR3(n,:));
    
    M(n,3)=std(Kx(n,:));
    MR1(n,3)=std(KxR1(n,:));
    MR2(n,3)=std(KxR2(n,:));
    MR3(n,3)=std(KxR3(n,:));
    
    M(n,4)=mean(Ky(n,:));
    MR1(n,4)=mean(KyR1(n,:));
    MR2(n,4)=mean(KyR2(n,:));
    MR3(n,4)=mean(KyR3(n,:));
    
    M(n,5)=std(Ky(n,:));
    MR1(n,5)=std(KyR1(n,:));
    MR2(n,5)=std(KyR2(n,:));
    MR3(n,5)=std(KyR3(n,:));
    
    M(n,6)=std(Ki(n,:));
    MR1(n,6)=std(KiR1(n,:));
    MR2(n,6)=std(KiR2(n,:));
    MR3(n,6)=std(KiR3(n,:));
    
    M(n,7)=mean(KiFC(n,:));
    M(n,8)=std(KiFC(n,:));
end

for n=1:MaxBacLifed    
    Md(n,1)=mean(Kdi(n,:));
    MdR1(n,1)=mean(KdiR1(n,:));
    MdR2(n,1)=mean(KdiR2(n,:));
    MdR3(n,1)=mean(KdiR3(n,:));
    
    Md(n,2)=mean(Kdx(n,:));
    MdR1(n,2)=mean(KdxR1(n,:));
    MdR2(n,2)=mean(KdxR2(n,:));
    MdR3(n,2)=mean(KdxR3(n,:));
    
    Md(n,3)=std(Kdx(n,:));
    MdR1(n,3)=std(KdxR1(n,:));
    MdR2(n,3)=std(KdxR2(n,:));
    MdR3(n,3)=std(KdxR3(n,:));
    
    Md(n,4)=mean(Kdy(n,:));
    MdR1(n,4)=mean(KdyR1(n,:));
    MdR2(n,4)=mean(KdyR2(n,:));
    MdR3(n,4)=mean(KdyR3(n,:));
    
    Md(n,5)=std(Kdy(n,:));
    MdR1(n,5)=std(KdyR1(n,:));
    MdR2(n,5)=std(KdyR2(n,:));
    MdR3(n,5)=std(KdyR3(n,:));
    
    Md(n,6)=std(Kdi(n,:));
    MdR1(n,6)=std(KdiR1(n,:));
    MdR2(n,6)=std(KdiR2(n,:));
    MdR3(n,6)=std(KdiR3(n,:));
    
    Md(n,7)=mean(KdiFC(n,:));
    Md(n,8)=std(KdiFC(n,:));
end

Mratio=M(:,1)./M(:,7);
Mratiostd=std(Mratio);

Mdratio=Md(:,1)./Md(:,7);
Mdratiostd=std(Mdratio);

%% Estimation of Single Tus Protein 
SPItus=mean([(MeanIntT-MeanIntDR1) (MeanIntDR1-MeanIntDR2) ...
    (MeanIntDR2-MeanIntDR3)]);
%% Importing the real lifetime data from 'original' Bacpics
MainPathTusOri=strcat(initval.basepath,'Stacks/Tus/DataMULTI/');
MainPathdifOri=strcat(initval.basepath,'Stacks/dif/DataMULTI/');

for i=1:Ncells;
    Dori{i}=load(strcat(MainPathTusOri,num2str(i),'.mat'));
    dori{i}=load(strcat(MainPathdifOri,num2str(i),'.mat'));
    CelllifeT(i)=length(Dori{i}.XNorm(:,1));
    Celllifed(i)=length(dori{i}.XNorm(:,1));
end

MeanCellLifed=mean(Celllifed);
MeanCellLifeT=mean(CelllifeT);

toc
